---
# tasks file for letsencrypt
#
# Problem:
# We want to install certificates no matter what,
# but we don't want to ask for genuine certificates
# every time we run this playbook.
#
# Solution:
# Check if there is a LetsEncrypt renewal file
# (which indicates the user has manually requested
# genuine certificates from LetsEncrypt).
# If it is not there, install self-signed, snake oil
# certificates.



# Install required packages:

- name: Install software-properties-common
  become: yes
  apt: name=software-properties-common update_cache=yes
  tags:
    - apt

- name: Install ssl-cert package
  become: yes
  apt: name=ssl-cert update_cache=yes
  tags:
    - apt

- name: Add LetsEncrypt certbot apt repo
  become: yes
  apt_repository:
    repo: ppa:certbot/certbot
  tags:
    - apt

- name: Update aptitude after adding apt repo
  become: yes
  apt:
    update_cache: yes
  tags:
    - apt

- name: Install certbot
  become: yes
  apt: name=python-certbot-nginx update_cache=yes
  tags:
    - apt




# LetsEncrypt/certbot does not actually install
# the ssl options file it references in the 
# config file. We need to do it ourselves.

- name: "Check if /etc/letsencrypt/options-nginx-ssl.conf is present"
  become: yes
  stat:
    path: "/etc/letsencrypt/options-nginx-ssl.conf"
  register: ssl_options_installed

- name: "Install /etc/letsencrypt/options-nginx-ssl.conf"
  become: yes
  get_url:
    url: "https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/options-ssl-nginx.conf"
    dest: /etc/letsencrypt/options-ssl-nginx.conf
  when:
  - not ssl_options_installed.stat.exists

- name: "Check if /etc/letsencrypt/ssl-dhparams.conf is present"
  become: yes
  stat:
    path: "/etc/letsencrypt/ssl-dhparams.conf"
  register: dhparams_installed

- name: "Install /etc/letsencrypt/ssl-dhparams.conf"
  become: yes
  get_url:
    url: "https://raw.githubusercontent.com/certbot/certbot/master/certbot/ssl-dhparams.pem"
    dest: /etc/letsencrypt/ssl-dhparams.pem
  when:
  - not dhparams_installed.stat.exists




# Make the LetsEncrypt live certificate directory 
# if it does not exist already

- name: Make LetsEncrypt certificate directory
  become: yes
  file:
    path: "/etc/letsencrypt/live/{{ item }}"
    state: directory
  with_items: "{{ domains }}"




# The following stat checks for the existence of a
# LetsEncrypt renewal file, which indicates that
# LetsEncrypt has been run and set up.
# 
# If the node is in production mode, if LetsEncrypt 
# has been run, `cert_installed` will be true.
#
# If the node is still in staging mode, and LetsEncrypt
# has not yet been run, `cert_installed` will be false.
#
# This boolean is used to control how we deal with
# the nginx configuration file. (Test config is removed
# once node is live.)

- name: Check if LetsEncrypt renewal certificate is present
  become: yes
  stat:
    path: "/etc/letsencrypt/renewal/{{ item }}.conf"
  with_items: "{{ domains }}"
  register: cert_installed




- name: Check if snakeoil certs are present (???)
  become: yes
  stat:
    path: "/etc/ssl/certs/ssl-cert-snakeoil.pem"
  register: snakeoil_certs_installed


- name: Install snakeoil certs
  become: yes
  copy:
    src: "/etc/ssl/certs/ssl-cert-snakeoil.pem"
    remote_src: yes
    dest: "/etc/letsencrypt/live/{{ item.item }}/fullchain.pem"
  with_items: "{{ cert_installed.results }}"
  when: "not item.stat.exists and snakeoil_certs_installed.stat.exists"




- name: Check if snakeoil private keys are present (???)
  become: yes
  stat:
    path: "/etc/ssl/private/ssl-cert-snakeoil.key"
  register: snakeoil_keys_installed


- name: Install snakeoil cert private keys
  become: yes
  copy:
    src: "/etc/ssl/private/ssl-cert-snakeoil.key"
    remote_src: yes
    dest: "/etc/letsencrypt/live/{{ item.item }}/privkey.pem"
  with_items: "{{ cert_installed.results }}"
  when: "not item.stat.exists and snakeoil_keys_installed.stat.exists"



# I think the letsencrypt nginx certbot above installs nginx,
# which automatically installs and runs itself. 

- name: Stop service nginx, if started
  service:
    name: nginx
    state: stopped

