---
###########################
# Set up webhooks pod
#
# git.charlesreid1.com/docker/pod-webhooks
# git.charlesreid1.com/docker/d-nginx-subdomains
#
# Tasks:
# ------
# 
# clone pod contents
#
# /www setup
#   pages subdomain clone
#   hooks subdomain clone
#   bots subdomain clone
# docker and docker compose checks
# pages subdomain prep
# captain hook setup
# captain hook canary setup
#
# construct the pod (docker-compose build)
# install service
# (port mapping in Dockerfile)
# (letsencrypt cert check)
# enable service
#
# NOTE: This is almost identical to
# pod-charlesreid1, except for a few
# different sections. We could have
# made everything shared, but f--k it
# this has dragged on long enough.
#
###########################



# #####################################
# CLONE POD-WEBHOOKS


# Check if we already cloned it
- name: Check if pod-webhooks repo is cloned
  stat:
    path: "{{ webhooks_install_dir }}"
  register: pod_webhooks_clone_check
  tags:
    - pod-webhooks


# Clone it
- name: Clone pod-webhooks
  become: yes
  become_user: "{{ username }}"
  git:
    repo: 'https://github.com/charlesreid1-docker/pod-webhooks.git'
    dest: "{{ webhooks_install_dir }}"
    recursive: yes
  when:
    - "not pod_webhooks_clone_check.stat.exists"
  tags:
    - pod-webhooks


# Pull it
- name: Pull pod-webhooks
  become: yes
  become_user: "{{ username }}"
  command: "git pull"
  args:
    chdir: "{{ webhooks_install_dir }}"
  when:
    - "pod_webhooks_clone_check.stat.exists"
  tags:
    - pod-webhooks


# Pull submodules
- name: Pull pod-webhooks submodules
  become: yes
  become_user: "{{ username }}"
  command: "git submodule update --remote"
  args:
    chdir: "{{ webhooks_install_dir }}"
  when:
    - "pod_webhooks_clone_check.stat.exists"
  tags:
    - pod-webhooks



# #####################################
# BUILD DOCKER-COMPOSE FILE FROM TEMPLATE
# 
- name: Fetch the docker-compose template from the remote machine
  run_once: true
  fetch:
    src: "{{ webhooks_install_dir }}/docker-compose.yml.j2"
    dest: "/tmp/pod-webhooks-docker-compose.yml.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - pod-webhooks
    - pod-webhooks-docker


- name: Install the docker-compose file
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/pod-webhooks-docker-compose.yml.j2"
    dest: "{{ webhooks_install_dir }}/docker-compose.yml"
    mode: 0640
    force: yes
  tags:
    - pod-webhooks
    - pod-webhooks-docker



# #####################################
# SET UP /WWW DIRECTORY
#
# Create /www directory
# for subdomains content
- name: Create the /www directory
  become: yes
  file:
    path: "/www"
    state: directory
    recurse: yes
    owner: "{{ username }}"
    group: "{{ username }}"
  tags:
    - pod-webhooks
    - pod-webhooks-content

# Template scripts to populate /www 
# with subdomain pages is done in the
# rules below...



# #####################################
# SUBDOMAIN PAGES SETUP (ALL)
# 
# Initializes the /www folder structure for
# /www/pages.*
# /www/hooks.*
# /www/bots.*
#
# This is done with template python scripts
# 
# /www/<subdomain>.charlesreid1.com/
#                 <subdomain>.charlesreid1.com-src/
#                 git/
#                 htdocs/


- name: "Fetch the initial subdomain clone commands script template"
  fetch:
    src: "{{ webhooks_install_dir }}/scripts/subdomains_init_setup.py.j2"
    dest: "/tmp/subdomains_init_setup.py.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - pod-webhooks
    - pod-webhooks-content


- name: "Install the initial subdomain clone commands script"
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/subdomains_init_setup.py.j2"
    dest: "{{ webhooks_install_dir }}/scripts/subdomains_init_setup.py"
    mode: 0755
    force: yes
  tags:
    - pod-webhooks
    - pod-webhooks-content


- name: Run initial clone commands to set up bots/pages/hooks subdomains at /www/
  command: "python {{ webhooks_install_dir }}/scripts/subdomains_init_setup.py"
  tags:
    - pod-webhooks
    - pod-webhooks-content



# #####################################
# PAGES SETUP
# 
# Initializes the contents of /www/pages.*/*

- name: Fetch the initial pages script
  fetch:
    src: "{{ webhooks_install_dir }}/scripts/pages_init_setup.py.j2"
    dest: "/tmp/pages_init_setup.py.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - pod-webhooks
    - pod-webhooks-content


- name: Install the pages init setup script
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/pages_init_setup.py.j2"
    dest: "{{ webhooks_install_dir }}/scripts/pages_init_setup.py"
    mode: 0755
    force: yes
  tags:
    - pod-webhooks
    - pod-webhooks-content


- name: Run initial clone commands to set up pages at /www/pages.charlesreid1.com
  command: "python {{ webhooks_install_dir }}/scripts/pages_init_setup.py"
  tags:
    - pod-webhooks
    - pod-webhooks-content



# #####################################
# DOCKER/DOCKER COMPOSE

# The docker role, in the base playbook,
# will install docker-compose, but we want
# to double check that the executable exists

- name: Check that docker compose executable is available
  stat:
    path: "/usr/local/bin/docker-compose"
  register: webhooks_register_docker_compose
  tags:
    - pod-webhooks
    - pod-webhooks-docker


# Also make sure the docker daemon is running

- name: Enable docker service
  become: yes
  service:
    name: docker
    enabled: yes
    state: restarted
  tags:
    - pod-webhooks
    - pod-webhooks-docker
    - pod-webhooks-services



# #####################################
# NGIX CONFIG PREP
#
# prepare the config files for the 
# subdomains nginx server:
# - copy templates from remote machine
# - clean conf.d directory
# - copy rendered templates to remote machine

- name: Clean d-nginx-subdomains conf.d directory
  become: yes
  become_user: "{{ username }}"
  command: "python {{ webhooks_install_dir }}/d-nginx-subdomains/scripts/clean_config.py"
  tags:
    - pod-webhooks


# Install the d-nginx-subdomains configuration templates
#
- name: Fetch d-nginx-subdomains configuration templates from remote machine
  run_once: true
  fetch:
    src: "{{ webhooks_install_dir }}/d-nginx-subdomains/conf.d_templates/http.subdomains.conf.j2"
    dest: "/tmp/http.subdomains.conf.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - pod-webhooks


- name: Install the d-nginx-subdomains configuration templates
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/http.subdomains.conf.j2"
    dest: "{{ webhooks_install_dir }}/d-nginx-subdomains/conf.d/http.subdomains.conf"
    force: yes
  tags:
    - pod-webhooks



# #####################################
# CAPTAIN HOOK SETUP

- name: Fetch the captain hook config file template
  fetch:
    src: "{{ webhooks_install_dir }}/b-captain-hook/config.json.j2"
    dest: "/tmp/captain_hook_config.json.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - captain-hook


- name: Install the captain hook config file
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/captain_hook_config.json.j2"
    dest: "{{ webhooks_install_dir }}/b-captain-hook/config.json"
    mode: 0755
    force: yes
  tags:
    - captain-hook


# #####################################
# CAPTAIN HOOK CANARY SCRIPT SETUP
#
# Start with the canary script first.
#
# The whole pod has to be built and the 
# pod startup service installed
# before the canary service can be
# installed.

# Script 1 - canary script itself
# Use the template provided to make it
#
- name: Fetch the captain hook canary script template from the remote machine
  run_once: true
  fetch:
    src: "{{ webhooks_install_dir }}/scripts/captain_hook_canary.sh.j2"
    dest: "/tmp/captain_hook_canary.sh.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - captain-hook

# Install the captain hook canary script
#
- name: Install the captain hook canary script
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/captain_hook_canary.sh.j2"
    dest: "{{ webhooks_install_dir }}/scripts/captain_hook_canary.sh"
    mode: 0755
    force: yes
  tags:
    - captain-hook


# Script 2 - pull host script
# Do it all again for the pull host script
# Use the template provided to make it
#
- name: Fetch the captain hook pull host script template from the remote machine
  run_once: true
  fetch:
    src: "{{ webhooks_install_dir }}/scripts/captain_hook_pull_host.sh.j2"
    dest: "/tmp/captain_hook_pull_host.sh.j2"
    flat: yes
    fail_on_missing: yes
  when:
    - "not canary_service_check.stat.exists"
  tags:
    - captain-hook

# Install the captain hook pull host script
- name: Install the captain hook pull host script
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/captain_hook_pull_host.sh.j2"
    dest: "{{ webhooks_install_dir }}/scripts/captain_hook_pull_host.sh"
    mode: 0755
    force: yes
  tags:
    - captain-hook



# #####################################
# CONSTRUCT THE POD
#
# This task is very time-consuming.

- name: Build pod-webhooks from scratch
  become: yes
  become_user: "{{ username }}"
  command: "/usr/local/bin/docker-compose build --no-cache"
  args:
    chdir: "{{ webhooks_install_dir }}"
  when:
    - "webhooks_register_docker_compose.stat.exists"



# #####################################
# INSTALL STARTUP SERVICE
# 
# Check if the webhooks docker pod service
# is installed. If not, install it.

### # Just kidding - don't bother.
### # Always reinstall the startup service.
### #
### - name: Check if pod-webhooks service is installed
###   stat:
###     path: "/etc/systemd/system/pod-webhooks.service"
###   register: pod_webhooks_service_check
###   tags:
###     - pod-webhooks-services


# Fetch the pod-webhooks service template
#
- name: Fetch the pod-webhooks template from remote host machine
  run_once: true
  fetch:
    src: "{{ webhooks_install_dir }}/scripts/pod-webhooks.service.j2"
    dest: "/tmp/pod-webhooks.service.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - pod-webhooks-services


# Apply the template and install it for goodness sake
# 
- name: Install pod-webhooks service
  become: yes
  template:
    src: "/tmp/pod-webhooks.service.j2"
    dest: "/etc/systemd/system/pod-webhooks.service"
    mode: 0774
  tags:
    - pod-webhooks-services


# Now enable the pod-webhooks service.
# Don't worry about SSL cert checks, not our problem.

- name: Enable pod-webhooks service
  become: yes
  service:
    name: pod-webhooks
    enabled: yes
    state: restarted
  when:
    - "webhooks_register_docker_compose.stat.executable"
  tags:
    - pod-webhooks-services



# #####################################
# CAPTAIN HOOK CANARY SERVICE SETUP

### # Begin by checking to see if installed
### # Just kidding - always reinstall the canary service from the repo template
### #
### - name: Check if the captain hook canary service is installed
###   stat:
###     path: "/etc/systemd/system/captain-hook-canary.service"
###   register: canary_service_check
###   tags:
###     - pod-webhooks-services
###     - captain-hook

# Fetch the captain hook canary startup service template onto local computer
# #
- name: Fetch the captain hook canary service template file from the remote machine
  run_once: true
  fetch:
    src: "{{ webhooks_install_dir }}/scripts/captain-hook-canary.service.j2"
    dest: "/tmp/captain-hook-canary.service.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - pod-webhooks-services
    - captain-hook


# Apply the captain hook canary startup service template
#
- name: Install the captain hook canary startup service
  become: yes
  template:
    src: "/tmp/captain-hook-canary.service.j2"
    dest: "/etc/systemd/system/captain-hook-canary.service"
    mode: 0774
    force: yes
  tags:
    - pod-webhooks-services
    - captain-hook


# Now enable the captain hook canary startup service.
#
- name: Enable the captain hook canary startup service
  become: yes
  service:
    name: captain-hook-canary
    enabled: yes
    state: restarted
  tags:
    - pod-webhooks-services
    - captain-hook






