---
###########################
# Set up webhooks pod
#
# git.charlesreid1.com/docker/pod-webhooks
# git.charlesreid1.com/docker/d-nginx-subdomains
#
# Tasks:
# ------
# 
# clone pod contents
#
# /www setup
#   pages subdomain clone
#   hooks subdomain clone
#   bots subdomain clone
# docker and docker compose checks
# pages subdomain prep
# captain hook setup
# captain hook canary setup
#
# construct the pod (docker-compose build)
# install service
# (port mapping in Dockerfile)
# (letsencrypt cert check)
# enable service
#
# NOTE: This is almost identical to
# pod-charlesreid1, except for a few
# different sections. We could have
# made everything shared, but f--k it
# this has dragged on long enough.
#
###########################



# #####################################
# CLONE POD-WEBHOOKS

# Check if we already cloned it
- name: Check if pod-webhooks repo is cloned
  stat:
    path: "{{ webhooks_install_dir }}"
  register: pod_webhooks_clone_check


# Clone it
- name: Clone pod-webhooks
  become: yes
  become_user: "{{ username }}"
  git:
    repo: 'https://github.com/charlesreid1-docker/pod-webhooks.git'
    dest: "{{ webhooks_install_dir }}"
    recursive: yes
  when:
    - "not pod_webhooks_clone_check.stat.exists"



# #####################################
# SET UP /WWW DIRECTORY
#
# /www/pages.charlesreid1.com/
#                 pages.charlesreid1.com-src/
#                 git/
#                 htdocs/
#
# /www/bots.charlesreid1.com/
#                 bots.charlesreid1.com-src/
#                 git/
#                 htdocs/
#
# /www/hooks.charlesreid1.com/
#                 hooks.charlesreid1.com-src/
#                 git/
#                 htdocs/
#

# Create /www directories for 
# pages, bots, and hooks subdomains
- name: Create the /www directory structure
  become: yes
  file:
    path: "/www/{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
  with_items:
    - "pages.charlesreid1.com"
    - "bots.charlesreid1.com"
    - "hooks.charlesreid1.com"

# TODO: Revisit /www dir structure for {pages,bots,hooks}.charlesreid1.com to add .blue and .red
# TODO: Revisit /www dir structure so we only hard code the subdomain name and not the top level domain



# #####################################
# DOCKER/DOCKER COMPOSE

# The docker role, in the base playbook,
# will install docker-compose, but we want
# to double check that the executable exists

- name: Check that docker compose executable is available
  stat:
    path: "/usr/local/bin/docker-compose"
  register: webhooks_register_docker_compose


# Also make sure the docker daemon is running

- name: Enable docker service
  become: yes
  service:
    name: docker
    enabled: yes
    state: restarted
  tags:
    - pod-webhooks-services



# #####################################
# SUBDOMAIN PAGES SETUP (ALL)

- name: Run initial clone commands to set up bots/pages/hooks subdomains at /www/
  command: "{{ webhooks_install_dir }}/scripts/subdomains_init_setup.py"



# #####################################
# PAGES SETUP

# Run the script (included in the pod-webhooks repo)
# to do the initial clone of the gh-pages branch of
# the subdomain sites into /www.
#
- name: Run initial clone commands to set up pages at /www/pages.charlesreid1.com
  command: "{{ webhooks_install_dir }}/scripts/pages_init_setup.py"



# #####################################
# CAPTAIN HOOK SETUP

# create/modify config file


# #####################################
# CAPTAIN HOOK CANARY SETUP

# Check if the captain hook canary service
# is installed. If not, install it.

- name: Check if captain-hook-canary service is installed
  stat:
    path: /etc/systemd/system/captain-hook-canary.service
  register: canary_service_check

- name: Fetch the Captain Hook canary service template file from the remote machine
  run_once: true
  fetch:
    src: "{{ webhooks_install_dir }}/docker-compose.yml.j2"
    dest: "/tmp/pod-webhooks-docker-compose.yml.j2"
    flat: yes
    fail_on_missing: yes

- name: Install the docker-compose file
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/pod-webhooks-docker-compose.yml.j2"
    dest: "{{ webhooks_install_dir }}/docker-compose.yml"
    mode: 0755



# #####################################
# CONSTRUCT THE POD
#
# This task is very time-consuming.

- name: Build pod-webhooks from scratch
  become: yes
  become_user: "{{ username }}"
  command: "/usr/local/bin/docker-compose build --no-cache"
  args:
    chdir: "{{ webhooks_install_dir }}"
  when:
    - "webhooks_register_docker_compose.stat.exists"



# #####################################
# INSTALL STARTUP SERVICE
# 
# Check if the webhooks docker pod service
# is installed. If not, install it.

- name: Check if pod-webhooks service is installed
  stat:
    path: /etc/systemd/system/pod-webhooks.service
  register: pod_webhooks_service_check
  tags:
    - pod-webhooks-services


- name: Install pod-webhooks service
  become: yes
  template:
    src: pod-webhooks.service.j2
    dest: /etc/systemd/system/pod-webhooks.service
    mode: 0777
  when:
    - "not pod_webhooks_service_check.stat.exists"
  tags:
    - pod-webhooks-services


# LetsEncrypt role will install certs as needed,
# but should probably check certs anyway.


# If certs are present, start/restart the
# pod-webhooks service.

- name: Enable pod-webhooks service
  become: yes
  service:
    name: pod-webhooks
    enabled: yes
    state: restarted
  when:
    - "webhooks_register_docker_compose.stat.executable"
    #- "register_letsencrypt_livecert.stat.exists"
  tags:
    - pod-webhooks-services


########################################
# Set up captain-hook-canary service
########################################



- name: Install captain-hook-canary service
  template:
    src: captain-hook-canary.service.j2
    dest: /etc/systemd/system/captain-hook-canary.service
    mode: 0777
  when:
    - "not canary_service_check.stat.exists"

- name: Enable captain-hook-canary service
  service:
    name: captain-hook-canary
    enabled: yes
    state: restarted

