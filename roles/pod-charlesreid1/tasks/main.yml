---
###########################
# Set up charlesreid1.com docker pod
#
# git.charlesreid1.com/docker/pod-charlesreid1
# git.charlesreid1.com/docker/d-nginx-charlesreid1
#
# Tasks:
# ------
#
# clone pod contents
#
# /www setup
#   charlesreid1.com top level domain clone
#   charlesreid1.red top level domain clone
#   charlesreid1.blue top level domain clone
# docker and docker compose checks
# mediawiki prep
# gitea prep
#
# construct the pod (docker-compose build)
# install service
# (port mapping in Dockerfile)
# (letsencrypt cert check)
# enable service
#
###########################


# #####################################
# CLONE POD-CHARLESREID1


# Check if we already cloned it
- name: Check if pod-charlesreid1 repo is already cloned
  stat:
    path: "{{ pod_install_dir }}"
  register: pod_charlesreid1_clone_check


# Clone it
- name: Clone pod-charlesreid1
  become: yes
  become_user: "{{ username }}"
  git:
    repo: 'https://github.com/charlesreid1-docker/pod-charlesreid1.git'
    dest: "{{ pod_install_dir }}"
    recursive: yes
  when:
    - "not pod_charlesreid1_clone_check.stat.exists"


# #####################################
# BUILD DOCKER-COMPOSE FILE FROM TEMPLATE
# 
# Note: Don't use sed to replace the MySQL password placeholder.
# Use the fetch module to copy the template from the remote machine
# (i.e., the one in the git repo) to the local directory.
# Then use the template module to use the template.

- name: Fetch the docker-compose template from the remote machine
  run_once: true
  fetch:
    src: "{{ pod_install_dir }}/docker-compose.yml.j2"
    dest: "/tmp/docker-compose.yml.j2"
    flat: yes
    fail_on_missing: yes


- name: Install the docker-compose file
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/docker-compose.yml.j2"
    dest: "{{ pod_install_dir }}/docker-compose.yml"
    mode: 0755


# #####################################
# SET UP /WWW DIRECTORY
#
# /www/charlesreid1.TLD/
#                 charlesreid1.TLD-src/   <-- clone of charlesreid1.com repo, src branch
#                 git/            <-- .git dir for charlesreid1.com repo gh-pages branch
#                 git.data/       <-- .git dir for charlesreid1-data
#                 htdocs/         <-- clone of charlesreid1.com repo gh-pages branch
#                     data/       <-- clone of charlesreid1-data


# Create /www directories for main site
- name: Create the /www directory structure
  file:
    path: "/www/{{ item }}"
    state: directory
    owner: "{{ nonroot_user }}"
    group: "{{ nonroot_user }}"
  with_items:
    - "charlesreid1.com"
    - "charlesreid1.red"
    - "charlesreid1.blue"


# Run the script (included in the pod-webhooks repo)
# to do the initial clone of the gh-pages branch
# into /www 

- name: Run initial clone commands to set up htdocs at /www/charlesreid1.TLD
  command: "{{ pod_install_dir }}/scripts/git_clone_www.sh"



# #####################################
# DOCKER/DOCKER COMPOSE

# The docker role, in the base playbook,
# will install docker-compose, but we want
# to double check that the executable exists

- name: Check that docker compose executable is available
  stat:
    path: "/usr/local/bin/docker-compose"
  register: pod_register_docker_compose


# Also make sure the docker daemon is running

- name: Enable docker service
  become: yes
  service:
    name: docker
    enabled: yes
    state: restarted
  tags:
    - pod-charlesreid1-services



# #####################################
# MEDIAWIKI PREP
#
# We have to build the extensions dir for the MediaWiki container
# /pod-charlesreid1/d-mediawiki/charlesreid1-config/mediawiki/build_extensions_dir.sh 

- name: Check if extensions dir already exists
  stat:
    path: "{{ pod_install_dir }}/d-mediawiki/charlesreid1-config/mediawiki/extensions"
  register: extensions_dir_exists
  tags:
    - pod-charlesreid1-mw


- name: Make mediawiki extensions dir build script executable
  become: yes
  become_user: "{{ username }}"
  file:
    path: "{{ pod_install_dir }}/d-mediawiki/charlesreid1-config/mediawiki/build_extensions_dir.sh"
    mode: "u+x"
  when:
    - "not extensions_dir_exists.stat.exists"
  tags:
    - pod-charlesreid1-mw


- name: Build the mediawiki extensions dir
  become: yes
  become_user: "{{ username }}"
  command: "{{ pod_install_dir }}/d-mediawiki/charlesreid1-config/mediawiki/build_extensions_dir.sh"
  args:
    chdir: "{{ pod_install_dir }}/d-mediawiki/charlesreid1-config/mediawiki"
  when:
    - "not extensions_dir_exists.stat.exists"
  tags:
    - pod-charlesreid1-mw


# #####################################
# GITEA PREP
#
# We have to create an app.ini file,
# use a jinja template in the pod-charlesreid1 
# repository

- name: Fetch the app.ini jinja template
  run_once: true
  fetch:
    src: "{{ pod_install_dir }}/d-gitea/app.ini.j2"
    dest: "/tmp/app.ini.j2"
    flat: yes
    fail_on_missing: yes
  tags:
    - pod-charlesreid1-gitea


- name: Make the custom conf dir for app.ini
  become: yes
  file:
    dest: "{{ pod_install_dir }}/d-gitea/custom/conf"
    mode: "u+x"
    state: directory
    recurse: yes
    owner: "{{ username }}"
    group: "{{ username }}"
  tags:
    - pod-charlesreid1-gitea


- name: Install the app.ini file
  become: yes
  become_user: "{{ username }}"
  template:
    src: "/tmp/app.ini.j2"
    dest: "{{ pod_install_dir }}/d-gitea/custom/conf/app.ini"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0755
  tags:
    - pod-charlesreid1-gitea



# #####################################
# CONSTRUCT THE POD
#
# This task is very time-consuming.

- name: Build pod-charlesreid1 from scratch
  become: yes
  become_user: "{{ username }}"
  command: "/usr/local/bin/docker-compose build --no-cache"
  args:
    chdir: "{{ pod_install_dir }}"
  when:
    - "pod_register_docker_compose.stat.exists"


# #####################################
# INSTALL STARTUP SERVICE
# 
# Check if the charlesreid1 docker pod service
# is installed. If not, install it.

- name: Check if pod-charlesreid1 service is installed
  stat:
    path: /etc/systemd/system/pod-charlesreid1.service
  register: pod_charlesreid1_service_check
  tags:
    - pod-charlesreid1-services


- name: Install pod-charlesreid1 service
  become: yes
  template:
    src: pod-charlesreid1.service.j2
    dest: /etc/systemd/system/pod-charlesreid1.service
    mode: 0777
  when:
    - "not pod_charlesreid1_service_check.stat.exists"
  tags:
    - pod-charlesreid1-services


# LetsEncrypt role will install certs,
# either fake or real, so this should
# always pass.

- name: Check if LetsEncrypt live domain cert is present
  tags:
    - letsencrypt
  stat:
    path: "/etc/letsencrypt/live/{{ top_domain }}"
  register: register_letsencrypt_livecert


# If certs are present, start/restart the
# pod-charlesreid1 service.

- name: Enable pod-charlesreid1 service
  become: yes
  service:
    name: pod-charlesreid1
    enabled: yes
    state: restarted
  when:
    - "pod_register_docker_compose.stat.executable"
    - "register_letsencrypt_livecert.stat.exists"
  tags:
    - pod-charlesreid1-services


# See the pod-charlesreid1 documentation
# pages for what to do from here.
#
# Specifically, restore:
# - mediawiki database backups
# - mediawiki files backups
# - gitea dump zip file
# - gitea avatars zip file
# 
# Restore scripts are located in the
# pod-charlesreid1 repository:
# - database restore script: utils-mysql
# - mediawiki image restore script: utils-mw
# - gitea database and avatar: utils-gitea


