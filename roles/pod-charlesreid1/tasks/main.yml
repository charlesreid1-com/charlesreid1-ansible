---
# tasks file for pod-charlesreid1
#
# clone pod contents
# docker-compose build
# install service
# port mapping taken care of in dockerfile
# letsencrypt dealt with by the role
# enable service


# Clone the charlesreid1 docker pod

- name: Clone pod-charlesreid1
  become: yes
  become_user: "{{ username }}"
  git:
    repo: 'https://github.com/charlesreid1-docker/pod-charlesreid1.git'
    dest: "{{ pod_install_dir }}"
    recursive: yes



# Rather than running a sed command to replace the password,
# use the fetch module to copy the template from the remote machine
# (i.e., the one in the git repo) to the local directory.
#
# Then use the template module to use the template.

- name: Fetch the docker-compose template from the remote machine
  run_once: true
  fetch:
    src: "{{ pod_install_dir }}/docker-compose.yml.j2"
    dest: "/tmp/docker-compose.yml.j2"
    flat: yes
    fail_on_missing: yes


- name: Install the docker-compose file
  become: yes
  become_user: "{{ username }}"
  template:
    src: /tmp/docker-compose.yml.j2
    dest: "{{ pod_install_dir }}/docker-compose.yml"
    mode: 0755


# The docker role, in the base playbook,
# will install docker-compose

- name: Check that docker compose executable is available
  stat:
    path: "/usr/local/bin/docker-compose"
  register: pod_register_docker_compose



# MEDIAWIKI PREP
# We have to build the extensions dir for the MediaWiki container
# /pod-charlesreid1/d-mediawiki/charlesreid1-config/mediawiki/build_extensions_dir.sh 

- name: Check if extensions dir already exists
  stat:
    path: "{{ pod_install_dir }}/d-mediawiki/charlesreid1-config/mediawiki/extensions"
  register: extensions_dir_exists


- name: Make mediawiki extensions dir build script executable
  become: yes
  become_user: "{{ username }}"
  file:
    path: "{{ pod_install_dir }}/d-mediawiki/charlesreid1-config/mediawiki/build_extensions_dir.sh"
    mode: "u+x"
  when:
    - "not extensions_dir_exists.stat.exists"


- name: Build the mediawiki extensions dir
  become: yes
  become_user: "{{ username }}"
  command: "{{ pod_install_dir }}/d-mediawiki/charlesreid1-config/mediawiki/build_extensions_dir.sh"
  args:
    chdir: "{{ pod_install_dir }}/d-mediawiki/charlesreid1-config/mediawiki"
  when:
    - "not extensions_dir_exists.stat.exists"


# CONSTRUCT THE POD
# This task will be time-consuming.

- name: Build pod-charlesreid1 from scratch
  become: yes
  become_user: "{{ username }}"
  command: "/usr/local/bin/docker-compose build --no-cache"
  args:
    chdir: "{{ pod_install_dir }}"
  when:
    - "pod_register_docker_compose.stat.exists"


# Check if the charlesreid1 docker pod service
# is installed. If not, install it.

- name: Check if pod-charlesreid1 service is installed
  stat:
    path: /etc/systemd/system/pod-charlesreid1.service
  register: pod_charlesreid1_service_check


- name: Install pod-charlesreid1 service
  become: yes
  template:
    src: pod-charlesreid1.service.j2
    dest: /etc/systemd/system/pod-charlesreid1.service
    mode: 0777
  when:
    - "not pod_charlesreid1_service_check.stat.exists"


# LetsEncrypt role will install certs,
# either fake or real, so this should
# always pass.

- name: Check if LetsEncrypt live domain cert is present
  tags:
    - letsencrypt
  stat:
    path: "/etc/letsencrypt/live/{{ top_domain }}"
  register: register_letsencrypt_livecert


- name: Enable pod-charlesreid1 service
  become: yes
  service:
    name: pod-charlesreid1
    enabled: yes
    state: restarted
  when:
    - "pod_register_docker_compose.stat.executable"
    - "register_letsencrypt_livecert.stat.exists"


# From pod docs:
# - mw database backup
# - mw files backup
# - gitea dump zip
# - gitea avatars zip
# 
# database restore script: utils-mysql
# mediawiki image restore script: utils-mw
# gitea database and avatar: utils-gitea


