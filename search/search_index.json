{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"charlesreid1-ansible \u00b6 Ansible playbooks for charlesreid1.com infrastructure. Table of Contents \u00b6 Docker Pods Playbooks Roles Getting Started with Playbooks Running Playbooks Running Select Tasks with Tags Secrets and Sensitive Information Vagrant Testing DigitalOcean Deployment Master Checklist \u00b6 Before you get started: Provision a compute node (Vagrant or cloud provider) If using Vagrant, see the Ansible Vagrant page for instructions on how to provision virtual machines. If using a cloud provider, follow the instructions provided by your cloud provider. Configure and enable SSH access If using Vagrant, see the Ansible Vagrant page for instructions on how to get SSH key information from Vagrant virtual machines. If using a cloud provider, you should be provided with an SSH key or SSH access instructions by your cloud provider. Run Ansible with the base.yml playbook - see Ansible Playbooks and base.yml for information and details about this playbook. Run Ansible with the pod-charlesreid1 playbook pod-charlesreid1.yml Configure DNS to point to the IP address of the compute node Docker Pods \u00b6 These docker pods are collections of related charlesreid1.com services. The Ansible playbooks prepare remote nodes so they are ready to run these docker pods. Pod Link pod-charlesreid1 https://git.charlesreid1.com/docker/pod-charlesreid1 The following pods HAVE BEEN DEACTIVATED: Pod Link pod-webhooks https://git.charlesreid1.com/docker/pod-webhooks pod-bots https://git.charlesreid1.com/docker/pod-bots Playbooks \u00b6 There is one playbook per docker pod, plus a base playbook and a provision playbook. Playbook Description Link provision.yml (Vagrant-only) Playbook to provision new Ubuntu machines with /usr/bin/python . link base.yml Base playbook run by all of the pod playbooks above. link podcharlesreid1.yml Playbook to install and run the charlesreid1.com docker pod link Roles \u00b6 Base Playbook Roles \u00b6 The following roles carry out groups of tasks for setting up the base machine to run charlesreid1.com infrastructure. Role Name Description init-root Prepare root user account init-nonroot Prepare nonroot user account(s) install-stuff Install stuff with aptitude pyenv Install pyenv for nonroot user goenv Install goenv for nonroot user sshkeys Set up ssh keys for all users vim Set up vim for nonroot user dotfiles Install and configure dotfiles for nonroot user Pod-Specific Roles \u00b6 The following roles are run by playbooks specific to the respective docker pod. Role Name Description pod-charlesreid1 Role specific to the charlesreid1.com docker pod Getting Started with Playbooks \u00b6 Documentation Page Description docs/index.md Documentation index docs/quickstart.md Quick start for the impatient (uses Vagrant) docs/ansible_linode.md Guide for running charlesreid1.com playbooks on Linode docs/ansible_do.md Guide for running charlesreid1.com playbooks on Digital Ocean docs/ansible_vagrant.md Guide for running charlesreid1.com playbooks on Vagrant See Ansible Playbooks for a list of all playbooks in this directory, list of all tags, and info about how to use the playbooks. Running Playbooks \u00b6 To run Ansible playbooks, use the ansible-playbook command. You will need to specify: A configuration file to set Ansible options, using the ANSIBLE_CONFIG environment variable An inventory file to tell Ansible how to connect to remote machines, using the -i flag Here is an example call to ansible-playbook to show how it should look: ANSIBLE_CONFIG=\"my_config.cfg\" ansible-playbook -i myhosts main.yml ^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^ specify config file specify the the ansible with this env var inventory playbook file Use the Vagrant configuration file vagrant.cfg to run playbooks against local Vagrant virtual machines (local testing). Edit the vagranthosts file to match info printed by the vagrant ssh-config command. # Run ansible playbook on vagrant machines ANSIBLE_CONFIG=\"vagrant.cfg\" ansible-playbook -i vagranthosts main.yml Use the DigitalOcean configuration file do.cfg to run playbooks against DigitalOcean nodes. Edit the dohosts file to point to the correct SSH key and remote host IP address. # Run ansible playbook on DigitalOcean machines ANSIBLE_CONFIG=\"do.cfg\" ansible-playbook -i dohosts main.yml Running Select Tasks with Tags \u00b6 To run a specific task, you can filter tasks using tags. Use the --tags flag with the ansible-playbook command: ANSIBLE_CONFIG=\"my_config.cfg\" ansible-playbook \\ -i hosts \\ --vault-password-file=.vault_secret \\ main.yml \\ --tags tag1 ANSIBLE_CONFIG=\"my_config.cfg\" ansible-playbook \\ -i hosts \\ --vault-password-file=.vault_secret \\ main.yml \\ --tags tag1,tag2,tag3 Find a full list of tags at the Ansible Playbooks page . Secrets and Sensitive Information \u00b6 See Ansible Vault for details about how to use the Ansible vault to view/edit secrets and sensitive information. NOTE: The vault and vault secret should be set up before running playbooks against either Vagrant or AWS machines. Vagrant Testing \u00b6 See Ansible Vagrant for instructions on how to set up a Vagrant virtual machine to run the Ansible playbook against, for testing purposes. Linode Deployment \u00b6 See Ansible Linode for instructions on how to set up a Linode node to run the Ansible playbook against. Digital Ocean Deployment \u00b6 See Ansible Digital Ocean for instructions on how to set up an Digital Ocean node to run the Ansible playbook against.","title":"Index"},{"location":"#charlesreid1-ansible","text":"Ansible playbooks for charlesreid1.com infrastructure.","title":"charlesreid1-ansible"},{"location":"#table-of-contents","text":"Docker Pods Playbooks Roles Getting Started with Playbooks Running Playbooks Running Select Tasks with Tags Secrets and Sensitive Information Vagrant Testing DigitalOcean Deployment","title":"Table of Contents"},{"location":"#master-checklist","text":"Before you get started: Provision a compute node (Vagrant or cloud provider) If using Vagrant, see the Ansible Vagrant page for instructions on how to provision virtual machines. If using a cloud provider, follow the instructions provided by your cloud provider. Configure and enable SSH access If using Vagrant, see the Ansible Vagrant page for instructions on how to get SSH key information from Vagrant virtual machines. If using a cloud provider, you should be provided with an SSH key or SSH access instructions by your cloud provider. Run Ansible with the base.yml playbook - see Ansible Playbooks and base.yml for information and details about this playbook. Run Ansible with the pod-charlesreid1 playbook pod-charlesreid1.yml Configure DNS to point to the IP address of the compute node","title":"Master Checklist"},{"location":"#docker-pods","text":"These docker pods are collections of related charlesreid1.com services. The Ansible playbooks prepare remote nodes so they are ready to run these docker pods. Pod Link pod-charlesreid1 https://git.charlesreid1.com/docker/pod-charlesreid1 The following pods HAVE BEEN DEACTIVATED: Pod Link pod-webhooks https://git.charlesreid1.com/docker/pod-webhooks pod-bots https://git.charlesreid1.com/docker/pod-bots","title":"Docker Pods"},{"location":"#playbooks","text":"There is one playbook per docker pod, plus a base playbook and a provision playbook. Playbook Description Link provision.yml (Vagrant-only) Playbook to provision new Ubuntu machines with /usr/bin/python . link base.yml Base playbook run by all of the pod playbooks above. link podcharlesreid1.yml Playbook to install and run the charlesreid1.com docker pod link","title":"Playbooks"},{"location":"#roles","text":"","title":"Roles"},{"location":"#base-playbook-roles","text":"The following roles carry out groups of tasks for setting up the base machine to run charlesreid1.com infrastructure. Role Name Description init-root Prepare root user account init-nonroot Prepare nonroot user account(s) install-stuff Install stuff with aptitude pyenv Install pyenv for nonroot user goenv Install goenv for nonroot user sshkeys Set up ssh keys for all users vim Set up vim for nonroot user dotfiles Install and configure dotfiles for nonroot user","title":"Base Playbook Roles"},{"location":"#pod-specific-roles","text":"The following roles are run by playbooks specific to the respective docker pod. Role Name Description pod-charlesreid1 Role specific to the charlesreid1.com docker pod","title":"Pod-Specific Roles"},{"location":"#getting-started-with-playbooks","text":"Documentation Page Description docs/index.md Documentation index docs/quickstart.md Quick start for the impatient (uses Vagrant) docs/ansible_linode.md Guide for running charlesreid1.com playbooks on Linode docs/ansible_do.md Guide for running charlesreid1.com playbooks on Digital Ocean docs/ansible_vagrant.md Guide for running charlesreid1.com playbooks on Vagrant See Ansible Playbooks for a list of all playbooks in this directory, list of all tags, and info about how to use the playbooks.","title":"Getting Started with Playbooks"},{"location":"#running-playbooks","text":"To run Ansible playbooks, use the ansible-playbook command. You will need to specify: A configuration file to set Ansible options, using the ANSIBLE_CONFIG environment variable An inventory file to tell Ansible how to connect to remote machines, using the -i flag Here is an example call to ansible-playbook to show how it should look: ANSIBLE_CONFIG=\"my_config.cfg\" ansible-playbook -i myhosts main.yml ^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^ specify config file specify the the ansible with this env var inventory playbook file Use the Vagrant configuration file vagrant.cfg to run playbooks against local Vagrant virtual machines (local testing). Edit the vagranthosts file to match info printed by the vagrant ssh-config command. # Run ansible playbook on vagrant machines ANSIBLE_CONFIG=\"vagrant.cfg\" ansible-playbook -i vagranthosts main.yml Use the DigitalOcean configuration file do.cfg to run playbooks against DigitalOcean nodes. Edit the dohosts file to point to the correct SSH key and remote host IP address. # Run ansible playbook on DigitalOcean machines ANSIBLE_CONFIG=\"do.cfg\" ansible-playbook -i dohosts main.yml","title":"Running Playbooks"},{"location":"#running-select-tasks-with-tags","text":"To run a specific task, you can filter tasks using tags. Use the --tags flag with the ansible-playbook command: ANSIBLE_CONFIG=\"my_config.cfg\" ansible-playbook \\ -i hosts \\ --vault-password-file=.vault_secret \\ main.yml \\ --tags tag1 ANSIBLE_CONFIG=\"my_config.cfg\" ansible-playbook \\ -i hosts \\ --vault-password-file=.vault_secret \\ main.yml \\ --tags tag1,tag2,tag3 Find a full list of tags at the Ansible Playbooks page .","title":"Running Select Tasks with Tags"},{"location":"#secrets-and-sensitive-information","text":"See Ansible Vault for details about how to use the Ansible vault to view/edit secrets and sensitive information. NOTE: The vault and vault secret should be set up before running playbooks against either Vagrant or AWS machines.","title":"Secrets and Sensitive Information"},{"location":"#vagrant-testing","text":"See Ansible Vagrant for instructions on how to set up a Vagrant virtual machine to run the Ansible playbook against, for testing purposes.","title":"Vagrant Testing"},{"location":"#linode-deployment","text":"See Ansible Linode for instructions on how to set up a Linode node to run the Ansible playbook against.","title":"Linode Deployment"},{"location":"#digital-ocean-deployment","text":"See Ansible Digital Ocean for instructions on how to set up an Digital Ocean node to run the Ansible playbook against.","title":"Digital Ocean Deployment"},{"location":"ansible_cowsay/","text":"Ansible Cowsay \u00b6 This page covers the cowsay command and all the cows that show up when you run ansible. Table of Contents \u00b6 Wat Turn off cows Weird cows Wat \u00b6 One of the first things you notice about ansible is that it tells you what's going on via a series of cows: ____________ < PLAY [all] > ------------ \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || That's because Ansible is wrapping log messages with the program cowsay, which prints out text in a text bubble accompanied by a cow. Turn off cows \u00b6 To turn off the cows, set ANSIBLE_NOCOWS=1 : ANSIBLE_NOCOWS=1 \\ ANSIBLE_CONFIG=\"vagrant.cfg\" \\ ansible-playbook \\ base.yml which is boring: GATHERING FACTS *************************************************************** ok: [127.0.0.1] Weird cows \u00b6 Fortunately, cowsay comes with many kinds of cows: $ cowsay -l Cow files in /usr/local/Cellar/cowsay/3.04/share/cows: beavis.zen blowfish bong bud-frogs bunny cheese cower daemon default dragon dragon-and-cow elephant elephant-in-snake eyes flaming-sheep ghostbusters head-in hellokitty kiss kitty koala kosh luke-koala meow milk moofasa moose mutilated ren satanic sheep skeleton small sodomized stegosaurus stimpy supermilker surgery telebears three-eyes turkey turtle tux udder vader vader-koala www ...so many questions. To specify a particular cow, set the ANSIBLE_COW_SELECTION variable: ANSIBLE_COW_SELECTION=vader gives you ___________________________ < PLAY [Initial setup root] > --------------------------- \\ ,-^-. \\ !oYo! \\ /./=\\.\\______ ## )\\/\\ ||-----w|| || || Cowth Vader ________________________ < TASK [Gathering Facts] > ------------------------ \\ ,-^-. \\ !oYo! \\ /./=\\.\\______ ## )\\/\\ ||-----w|| || || Cowth Vader Here is ANSIBLE_COW_SELECTION=tux : < GATHERING FACTS > ----------------- \\ \\ .--. |o_o | |:_/ | // \\ \\ (| | ) /'\\_ _/`\\ \\___)=(___/","title":"Ansible Cowsay"},{"location":"ansible_cowsay/#ansible-cowsay","text":"This page covers the cowsay command and all the cows that show up when you run ansible.","title":"Ansible Cowsay"},{"location":"ansible_cowsay/#table-of-contents","text":"Wat Turn off cows Weird cows","title":"Table of Contents"},{"location":"ansible_cowsay/#wat","text":"One of the first things you notice about ansible is that it tells you what's going on via a series of cows: ____________ < PLAY [all] > ------------ \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || That's because Ansible is wrapping log messages with the program cowsay, which prints out text in a text bubble accompanied by a cow.","title":"Wat"},{"location":"ansible_cowsay/#turn-off-cows","text":"To turn off the cows, set ANSIBLE_NOCOWS=1 : ANSIBLE_NOCOWS=1 \\ ANSIBLE_CONFIG=\"vagrant.cfg\" \\ ansible-playbook \\ base.yml which is boring: GATHERING FACTS *************************************************************** ok: [127.0.0.1]","title":"Turn off cows"},{"location":"ansible_cowsay/#weird-cows","text":"Fortunately, cowsay comes with many kinds of cows: $ cowsay -l Cow files in /usr/local/Cellar/cowsay/3.04/share/cows: beavis.zen blowfish bong bud-frogs bunny cheese cower daemon default dragon dragon-and-cow elephant elephant-in-snake eyes flaming-sheep ghostbusters head-in hellokitty kiss kitty koala kosh luke-koala meow milk moofasa moose mutilated ren satanic sheep skeleton small sodomized stegosaurus stimpy supermilker surgery telebears three-eyes turkey turtle tux udder vader vader-koala www ...so many questions. To specify a particular cow, set the ANSIBLE_COW_SELECTION variable: ANSIBLE_COW_SELECTION=vader gives you ___________________________ < PLAY [Initial setup root] > --------------------------- \\ ,-^-. \\ !oYo! \\ /./=\\.\\______ ## )\\/\\ ||-----w|| || || Cowth Vader ________________________ < TASK [Gathering Facts] > ------------------------ \\ ,-^-. \\ !oYo! \\ /./=\\.\\______ ## )\\/\\ ||-----w|| || || Cowth Vader Here is ANSIBLE_COW_SELECTION=tux : < GATHERING FACTS > ----------------- \\ \\ .--. |o_o | |:_/ | // \\ \\ (| | ) /'\\_ _/`\\ \\___)=(___/","title":"Weird cows"},{"location":"ansible_do/","text":"Digital Ocean Quickstart \u00b6 This quickstart walks through the process of setting up a Digital Ocean droplet using these Ansible playbooks. Table of Contents \u00b6 Droplet setup Run provision and base playbooks Run pod playbooks Droplet setup \u00b6 Start by logging in to your Digital Ocean account and creating a droplet. You should be able to create or specify an SSH key. Warning You must modify the path to the SSH private key, specified in do.cfg (the Digital Ocean Ansible config file), to match the SSH key that you added to the droplet at its creation. Warning Once you create your droplet and it is connected to the internet via a public IP, you must update the file dohosts (the Digital Ocean Ansible inventory file) to point to the correct IP address for the droplet. Run provision and base playbooks \u00b6 Once you have the correct SSH key in do.cfg and the correct droplet IP address in dohosts , you are ready to run the Ansible playbooks. Run the provision playbook to prepare the droplet for Ansible: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ provision.yml Now you can run the base playbook. Warning You must provide a machine_name parameter to the base playbook. This variable is not defined by default. Define it using the --extra-vars flag. Specifying a machine name using the --extra-vars flag: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ --extra-vars \"machine_name=redbeard\" \\ base.yml Run pod playbooks \u00b6 Once you've run the base playbook, you can install the docker pod with the corresponding playbook by specifying ANSIBLE_CONFIG and pointing to the Digital Ocean config file. pod-charlesreid1: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ --extra-vars \"machine_name=redbeard\" \\ podcharlesreid1.yml","title":"Ansible on DigitalOcean"},{"location":"ansible_do/#digital-ocean-quickstart","text":"This quickstart walks through the process of setting up a Digital Ocean droplet using these Ansible playbooks.","title":"Digital Ocean Quickstart"},{"location":"ansible_do/#table-of-contents","text":"Droplet setup Run provision and base playbooks Run pod playbooks","title":"Table of Contents"},{"location":"ansible_do/#droplet-setup","text":"Start by logging in to your Digital Ocean account and creating a droplet. You should be able to create or specify an SSH key. Warning You must modify the path to the SSH private key, specified in do.cfg (the Digital Ocean Ansible config file), to match the SSH key that you added to the droplet at its creation. Warning Once you create your droplet and it is connected to the internet via a public IP, you must update the file dohosts (the Digital Ocean Ansible inventory file) to point to the correct IP address for the droplet.","title":"Droplet setup"},{"location":"ansible_do/#run-provision-and-base-playbooks","text":"Once you have the correct SSH key in do.cfg and the correct droplet IP address in dohosts , you are ready to run the Ansible playbooks. Run the provision playbook to prepare the droplet for Ansible: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ provision.yml Now you can run the base playbook. Warning You must provide a machine_name parameter to the base playbook. This variable is not defined by default. Define it using the --extra-vars flag. Specifying a machine name using the --extra-vars flag: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ --extra-vars \"machine_name=redbeard\" \\ base.yml","title":"Run provision and base playbooks"},{"location":"ansible_do/#run-pod-playbooks","text":"Once you've run the base playbook, you can install the docker pod with the corresponding playbook by specifying ANSIBLE_CONFIG and pointing to the Digital Ocean config file. pod-charlesreid1: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ --extra-vars \"machine_name=redbeard\" \\ podcharlesreid1.yml","title":"Run pod playbooks"},{"location":"ansible_linode/","text":"Linode Quickstart \u00b6 This quickstart walks through the process of setting up a Linode node using these Ansible playbooks. Table of Contents \u00b6 Node setup Run provision and base playbooks Run pod playbooks Node setup \u00b6 Start by logging in to your Linode account and creating a new node. You should be able to create or specify an SSH key. Warning You must modify the path to the SSH private key, specified in linode.cfg (the Linode Ansible config file), to match the SSH key that you added to the droplet at its creation. Warning Once you create your droplet and it is connected to the internet via a public IP, you must update the file linodehosts (the Linode Ansible inventory file) to point to the correct IP address for the node. Run provision and base playbooks \u00b6 Once you have the correct SSH key in linode.cfg and the correct droplet IP address in linodehosts , you are ready to run the Ansible playbooks. Run the provision playbook to prepare the droplet for Ansible: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ provision.yml Now you can run the base playbook. Warning You must provide a machine_name parameter to the base playbook. This variable is not defined by default. Define it using the --extra-vars flag. Specifying a machine name using the --extra-vars flag: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ --extra-vars \"machine_name=redbeard\" \\ base.yml Run pod playbooks \u00b6 Once you've run the base playbook, you can install the docker pod with the corresponding playbook by specifying ANSIBLE_CONFIG and pointing to the Linode config file. pod-charlesreid1: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ --extra-vars \"machine_name=redbeard\" \\ podcharlesreid1.yml","title":"Ansible on Linode"},{"location":"ansible_linode/#linode-quickstart","text":"This quickstart walks through the process of setting up a Linode node using these Ansible playbooks.","title":"Linode Quickstart"},{"location":"ansible_linode/#table-of-contents","text":"Node setup Run provision and base playbooks Run pod playbooks","title":"Table of Contents"},{"location":"ansible_linode/#node-setup","text":"Start by logging in to your Linode account and creating a new node. You should be able to create or specify an SSH key. Warning You must modify the path to the SSH private key, specified in linode.cfg (the Linode Ansible config file), to match the SSH key that you added to the droplet at its creation. Warning Once you create your droplet and it is connected to the internet via a public IP, you must update the file linodehosts (the Linode Ansible inventory file) to point to the correct IP address for the node.","title":"Node setup"},{"location":"ansible_linode/#run-provision-and-base-playbooks","text":"Once you have the correct SSH key in linode.cfg and the correct droplet IP address in linodehosts , you are ready to run the Ansible playbooks. Run the provision playbook to prepare the droplet for Ansible: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ provision.yml Now you can run the base playbook. Warning You must provide a machine_name parameter to the base playbook. This variable is not defined by default. Define it using the --extra-vars flag. Specifying a machine name using the --extra-vars flag: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ --extra-vars \"machine_name=redbeard\" \\ base.yml","title":"Run provision and base playbooks"},{"location":"ansible_linode/#run-pod-playbooks","text":"Once you've run the base playbook, you can install the docker pod with the corresponding playbook by specifying ANSIBLE_CONFIG and pointing to the Linode config file. pod-charlesreid1: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ --extra-vars \"machine_name=redbeard\" \\ podcharlesreid1.yml","title":"Run pod playbooks"},{"location":"ansible_playbooks/","text":"Ansible Playbooks \u00b6 This page covers what playbooks are in this directory and how to run them. Table of Contents \u00b6 provision.yml: Provision Your Remote Node base.yml: the base plays podcharlesreid1.yml: charlesreid1 docker pod play List of Tags provision.yml: Provision Your Remote Node \u00b6 The provision playbook is a preparation step to ensure Ansible has the software it needs to run. Specifically, Ubuntu distributions do not come with /usr/bin/python by default (only /usr/bin/python3 ), so the provision step installs /usr/bin/python . ANSIBLE_CONFIG=\"vagrant.cfg\" vagrant provision Running plays against a Linode/Digital Ocean node requires the provision playbook to be run explicitly with the command: # Linode ANSIBLE_CONFIG=\"linode.cfg\" ansible-playbook provision.yml # Digital Ocean ANSIBLE_CONFIG=\"do.cfg\" ansible-playbook provision.yml Also see the Provision sections of the ansible_vagrant.md and ansible_do.md pages. base.yml: the base plays \u00b6 The base.yml playbook contains a base set of plays for all charlesreid1.com nodes. This includes setup, tooling, dotfiles, user accounts, SSH keys, and so on. This playbook does not define a machine name. It is not usually run explicitly, except in tests, so machine name must be defined manually. To do that, use the --extra-vars flag: ANSIBLE_CONFIG=\"vagrant.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ base.yml To run on Linode: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ base.yml To run on Digital Ocean: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ base.yml podcharlesreid1.yml: charlesreid1 docker pod play \u00b6 The charlesreid1 docker pod runs the following: nginx letsencrypt/certs mediawiki gitea Example: Deploy the charlesreid1 docker pod play on a Vagrant machine. To do this, specify the Ansible-Vagrant configuration file and the vagrant hosts file: ANSIBLE_CONFIG=\"vagrant.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ podcharlesreid1.yml To set a custom hostname, use the --extra-vars flag as above: ANSIBLE_CONFIG=\"vagrant.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ podcharlesreid1.yml Linode Example: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ podcharlesreid1.yml Digital Ocean Example: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ podcharlesreid1.yml List of Tags \u00b6 (Incomplete) Each role has a tag associated with it, so you can run each role in isolation: aws init-root install-stuff goenv pyenv docker init-nonroot sshkeys dotfiles vim pod-charlesreid1 Base Playbook Tags \u00b6 The base playbook base.yml includes the majority of the roles, whose tags are listed here: aws init-root install-stuff goenv pyenv docker init-nonroot sshkeys dotfiles vim The base playbook also uses the following tags for sub-groups of tasks, or for groups of tasks that cross roles: aws_tools (aws command line tools and libraries only) aws_creds (aws credentials only) pip (all tasks installing packages using pip) apt (all tasks installing packages using apt) docker-no-compose (docker-only tasks) docker-compose (docker-compose-only tasks) root-ssh (setup of ssh keys for root user) nonroot-ssh (setup of ssh keys for nonroot user) pod-charlesreid1 Playbook Tags \u00b6 The pod-charlesreid1 playbook contains the docker pod playbook for charlesreid1.com. This is a single role. The entire role is run with the tag: pod-charlesreid1 Subtasks are grouped as follows: pod-charlesreid1-services (runs tasks that start the docker service and the pod service) pod-charlesreid1-gitea (set up gitea for pod-charlesreid1) pod-charlesreid1-mw (set up mediawiki for pod-charlesreid1)","title":"Ansible Playbooks"},{"location":"ansible_playbooks/#ansible-playbooks","text":"This page covers what playbooks are in this directory and how to run them.","title":"Ansible Playbooks"},{"location":"ansible_playbooks/#table-of-contents","text":"provision.yml: Provision Your Remote Node base.yml: the base plays podcharlesreid1.yml: charlesreid1 docker pod play List of Tags","title":"Table of Contents"},{"location":"ansible_playbooks/#provisionyml-provision-your-remote-node","text":"The provision playbook is a preparation step to ensure Ansible has the software it needs to run. Specifically, Ubuntu distributions do not come with /usr/bin/python by default (only /usr/bin/python3 ), so the provision step installs /usr/bin/python . ANSIBLE_CONFIG=\"vagrant.cfg\" vagrant provision Running plays against a Linode/Digital Ocean node requires the provision playbook to be run explicitly with the command: # Linode ANSIBLE_CONFIG=\"linode.cfg\" ansible-playbook provision.yml # Digital Ocean ANSIBLE_CONFIG=\"do.cfg\" ansible-playbook provision.yml Also see the Provision sections of the ansible_vagrant.md and ansible_do.md pages.","title":"provision.yml: Provision Your Remote Node"},{"location":"ansible_playbooks/#baseyml-the-base-plays","text":"The base.yml playbook contains a base set of plays for all charlesreid1.com nodes. This includes setup, tooling, dotfiles, user accounts, SSH keys, and so on. This playbook does not define a machine name. It is not usually run explicitly, except in tests, so machine name must be defined manually. To do that, use the --extra-vars flag: ANSIBLE_CONFIG=\"vagrant.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ base.yml To run on Linode: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ base.yml To run on Digital Ocean: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ base.yml","title":"base.yml: the base plays"},{"location":"ansible_playbooks/#podcharlesreid1yml-charlesreid1-docker-pod-play","text":"The charlesreid1 docker pod runs the following: nginx letsencrypt/certs mediawiki gitea Example: Deploy the charlesreid1 docker pod play on a Vagrant machine. To do this, specify the Ansible-Vagrant configuration file and the vagrant hosts file: ANSIBLE_CONFIG=\"vagrant.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ podcharlesreid1.yml To set a custom hostname, use the --extra-vars flag as above: ANSIBLE_CONFIG=\"vagrant.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ podcharlesreid1.yml Linode Example: ANSIBLE_CONFIG=\"linode.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ podcharlesreid1.yml Digital Ocean Example: ANSIBLE_CONFIG=\"do.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ --extra-vars \"machine_name=yoyo\" \\ podcharlesreid1.yml","title":"podcharlesreid1.yml: charlesreid1 docker pod play"},{"location":"ansible_playbooks/#list-of-tags","text":"(Incomplete) Each role has a tag associated with it, so you can run each role in isolation: aws init-root install-stuff goenv pyenv docker init-nonroot sshkeys dotfiles vim pod-charlesreid1","title":"List of Tags"},{"location":"ansible_playbooks/#base-playbook-tags","text":"The base playbook base.yml includes the majority of the roles, whose tags are listed here: aws init-root install-stuff goenv pyenv docker init-nonroot sshkeys dotfiles vim The base playbook also uses the following tags for sub-groups of tasks, or for groups of tasks that cross roles: aws_tools (aws command line tools and libraries only) aws_creds (aws credentials only) pip (all tasks installing packages using pip) apt (all tasks installing packages using apt) docker-no-compose (docker-only tasks) docker-compose (docker-compose-only tasks) root-ssh (setup of ssh keys for root user) nonroot-ssh (setup of ssh keys for nonroot user)","title":"Base Playbook Tags"},{"location":"ansible_playbooks/#pod-charlesreid1-playbook-tags","text":"The pod-charlesreid1 playbook contains the docker pod playbook for charlesreid1.com. This is a single role. The entire role is run with the tag: pod-charlesreid1 Subtasks are grouped as follows: pod-charlesreid1-services (runs tasks that start the docker service and the pod service) pod-charlesreid1-gitea (set up gitea for pod-charlesreid1) pod-charlesreid1-mw (set up mediawiki for pod-charlesreid1)","title":"pod-charlesreid1 Playbook Tags"},{"location":"ansible_vagrant/","text":"Local Ansible Testing with Vagrant \u00b6 Vagrant is a command-line wrapper around VirtualBox and allows setting up one or more virtual machines to test out Ansible playbooks locally. The repo contains a Vagrantfile (created with the command vagrant init ubuntu/xenial64 ) that has been modified to work with Ansible. Start Vagrant Machine \u00b6 Start a Vagrant virtual machine using the Vagrantfile by running the following command in this directory: vagrant up This will start a Ubuntu Xenial (16.04) machine. Provision Vagrant Machine (Setup Step) \u00b6 Ansible can be used to provision the vagrant machine, which is basically a step that gets it ready for the \"real\" Ansible playbook. (Specifically, the provision step installs /usr/bin/python , which is not included by default in newer versions of Ubuntu.) Use the Ansible configuration file that is intended for use with Vagrant, vagrant.cfg , when running the vagrant provision command: ANSIBLE_CONFIG=\"vagrant.cfg\" vagrant provision Set Vagrant Configuration File \u00b6 Now get info about how to SSH into the vagrant machines and provide this information in the vagranthosts Ansible inventory file: vagrant ssh-config Add information about the location of the private key file, and any other details, into vagrant.cfg : vagrant.cfg : [defaults] inventory = vagranthosts remote_user = vagrant private_key_file = ~/.vagrant.d/insecure_private_key host_key_checking = False log_path = ansible_vagrant.log command_warnings=False vault_password_file = .vault_secret This example points to a vault secret contained in the file .vault_secret as seen in the last line. See Ansible Vault for more info about vault secrets.","title":"Ansible on Vagrant"},{"location":"ansible_vagrant/#local-ansible-testing-with-vagrant","text":"Vagrant is a command-line wrapper around VirtualBox and allows setting up one or more virtual machines to test out Ansible playbooks locally. The repo contains a Vagrantfile (created with the command vagrant init ubuntu/xenial64 ) that has been modified to work with Ansible.","title":"Local Ansible Testing with Vagrant"},{"location":"ansible_vagrant/#start-vagrant-machine","text":"Start a Vagrant virtual machine using the Vagrantfile by running the following command in this directory: vagrant up This will start a Ubuntu Xenial (16.04) machine.","title":"Start Vagrant Machine"},{"location":"ansible_vagrant/#provision-vagrant-machine-setup-step","text":"Ansible can be used to provision the vagrant machine, which is basically a step that gets it ready for the \"real\" Ansible playbook. (Specifically, the provision step installs /usr/bin/python , which is not included by default in newer versions of Ubuntu.) Use the Ansible configuration file that is intended for use with Vagrant, vagrant.cfg , when running the vagrant provision command: ANSIBLE_CONFIG=\"vagrant.cfg\" vagrant provision","title":"Provision Vagrant Machine (Setup Step)"},{"location":"ansible_vagrant/#set-vagrant-configuration-file","text":"Now get info about how to SSH into the vagrant machines and provide this information in the vagranthosts Ansible inventory file: vagrant ssh-config Add information about the location of the private key file, and any other details, into vagrant.cfg : vagrant.cfg : [defaults] inventory = vagranthosts remote_user = vagrant private_key_file = ~/.vagrant.d/insecure_private_key host_key_checking = False log_path = ansible_vagrant.log command_warnings=False vault_password_file = .vault_secret This example points to a vault secret contained in the file .vault_secret as seen in the last line. See Ansible Vault for more info about vault secrets.","title":"Set Vagrant Configuration File"},{"location":"ansible_vault/","text":"Ansible Vault \u00b6 This page contains instructions for using the Ansible vault. Link: Ansible vault documentation Table of Contents \u00b6 What is Ansible Vault? Where is the vault file? How to view the vault file? How to create a vault file? How to edit the vault file? How to use the vault file? Adding new secret variables What is Ansible Vault? \u00b6 Ansible provides a \"vault\" function that allows sensitive data (passwords, sensitive info, or certificate files) to be encrypted, so it can be stored in a repository with the rest of the playbook. The vault is an ordinary YAML file that defines variables, except that the variables it defines are sensitive. These variables can be used elsewhere in the playbook. Ansible provides an ansible-vault command to interact with vault files. Where is the vault file? \u00b6 There is currently one vault file that applies to all servers. It is located in the repository at group_vars/all/vault . How to view the vault file? \u00b6 To view the contents of the vault file, use the view action: ansible-vault edit my_vault_file How to create a vault file? \u00b6 No new vault files should be needed for this repository, but to create a new vault file called my_vault_file , use the create action: ansible-vault create my_vault_file How to edit the vault file? \u00b6 To edit the contents of the vualt file, use the edit action EDITOR=\"vim\" ansible-vault edit my_vault_file How to use the vault file? \u00b6 Vault files are used by ansible in the process of running playbooks. The user can provide Ansible with the vault password either on the command line (via an interactive prompt), or the user can put the vault password into a file, and point Ansible to the vault password file when it is run. We do that latter, putting the vault password in the file .vault_secret . To tell ansible wehre to find the vault password, we set vault_password_file in the configuration file. In both configuration files, we have: vault_password_file = .vault_secret Put your password into the file .vault_secret and use this configuration file (by pointing to it with the ANSIBLE_CONFIG environment variable when running ansible). Adding new secret variables \u00b6 Suppose we have a role that utilizes a variable that is sensitive and should remain secret. To do this, we set up a series of variable definitions that allow the secret defined in the vault to be used for different roles. Suppose we have a role that uses an API key in a command. The role utilizes a variable {{ api_key }} like so: roles/my-role/tasks/main.yml : --- - name : A simple example task using a secret variable command : \"python script.py --api-key={{ api_key }}\" If the variable api_key is defined in the task default variable values, this command will be run but with an invalid API key. If the above command should only be run with a valid API key, you can leave api_key out of the default variable values. Here is what that would look like, if you defined the API key to be an empty string by default: roles/my-role/defaults/main.yml : --- api_key : \"\" To set the real api_key value, override the default variable value in the playbook(s) that run that role. For example, if the role my-role is called from a playbook main.yml , main.yml : --- - name : Run my-role roles : - role : my-role api_key : \"{{ charlesreid1_api_key }}\" This specifies that the api_key variable should be set to the value of the variable charlesreid1_api_key . The prefix charlesreid1 indicates a site-specific variable setting. Those variables are contained in group_vars/all/main.yml . The variable is defined there, but it is also defining the variable to be set to another variable value: group_vars/all/main.yml : --- charlesreid1_api_key : \"{{ vault_api_key }}\" The last step is to define the variable in the vault. This is where we use the ansible-vault command to edit the vault file: ANSIBLE_CONFIG=\"my_config.cfg\" ansible-vault edit group_vars/all/vault This is where you put the real API key: group_vars/all/vault : --- vault_api_key : \"ABCXYZ123456\"","title":"Ansible Vault"},{"location":"ansible_vault/#ansible-vault","text":"This page contains instructions for using the Ansible vault. Link: Ansible vault documentation","title":"Ansible Vault"},{"location":"ansible_vault/#table-of-contents","text":"What is Ansible Vault? Where is the vault file? How to view the vault file? How to create a vault file? How to edit the vault file? How to use the vault file? Adding new secret variables","title":"Table of Contents"},{"location":"ansible_vault/#what-is-ansible-vault","text":"Ansible provides a \"vault\" function that allows sensitive data (passwords, sensitive info, or certificate files) to be encrypted, so it can be stored in a repository with the rest of the playbook. The vault is an ordinary YAML file that defines variables, except that the variables it defines are sensitive. These variables can be used elsewhere in the playbook. Ansible provides an ansible-vault command to interact with vault files.","title":"What is Ansible Vault?"},{"location":"ansible_vault/#where-is-the-vault-file","text":"There is currently one vault file that applies to all servers. It is located in the repository at group_vars/all/vault .","title":"Where is the vault file?"},{"location":"ansible_vault/#how-to-view-the-vault-file","text":"To view the contents of the vault file, use the view action: ansible-vault edit my_vault_file","title":"How to view the vault file?"},{"location":"ansible_vault/#how-to-create-a-vault-file","text":"No new vault files should be needed for this repository, but to create a new vault file called my_vault_file , use the create action: ansible-vault create my_vault_file","title":"How to create a vault file?"},{"location":"ansible_vault/#how-to-edit-the-vault-file","text":"To edit the contents of the vualt file, use the edit action EDITOR=\"vim\" ansible-vault edit my_vault_file","title":"How to edit the vault file?"},{"location":"ansible_vault/#how-to-use-the-vault-file","text":"Vault files are used by ansible in the process of running playbooks. The user can provide Ansible with the vault password either on the command line (via an interactive prompt), or the user can put the vault password into a file, and point Ansible to the vault password file when it is run. We do that latter, putting the vault password in the file .vault_secret . To tell ansible wehre to find the vault password, we set vault_password_file in the configuration file. In both configuration files, we have: vault_password_file = .vault_secret Put your password into the file .vault_secret and use this configuration file (by pointing to it with the ANSIBLE_CONFIG environment variable when running ansible).","title":"How to use the vault file?"},{"location":"ansible_vault/#adding-new-secret-variables","text":"Suppose we have a role that utilizes a variable that is sensitive and should remain secret. To do this, we set up a series of variable definitions that allow the secret defined in the vault to be used for different roles. Suppose we have a role that uses an API key in a command. The role utilizes a variable {{ api_key }} like so: roles/my-role/tasks/main.yml : --- - name : A simple example task using a secret variable command : \"python script.py --api-key={{ api_key }}\" If the variable api_key is defined in the task default variable values, this command will be run but with an invalid API key. If the above command should only be run with a valid API key, you can leave api_key out of the default variable values. Here is what that would look like, if you defined the API key to be an empty string by default: roles/my-role/defaults/main.yml : --- api_key : \"\" To set the real api_key value, override the default variable value in the playbook(s) that run that role. For example, if the role my-role is called from a playbook main.yml , main.yml : --- - name : Run my-role roles : - role : my-role api_key : \"{{ charlesreid1_api_key }}\" This specifies that the api_key variable should be set to the value of the variable charlesreid1_api_key . The prefix charlesreid1 indicates a site-specific variable setting. Those variables are contained in group_vars/all/main.yml . The variable is defined there, but it is also defining the variable to be set to another variable value: group_vars/all/main.yml : --- charlesreid1_api_key : \"{{ vault_api_key }}\" The last step is to define the variable in the vault. This is where we use the ansible-vault command to edit the vault file: ANSIBLE_CONFIG=\"my_config.cfg\" ansible-vault edit group_vars/all/vault This is where you put the real API key: group_vars/all/vault : --- vault_api_key : \"ABCXYZ123456\"","title":"Adding new secret variables"},{"location":"quickstart/","text":"Quickstart \u00b6 This quickstart walks through the process of using Vagrant and running the charlesreid1 playbooks against a Vagrant machine. Table of Contents \u00b6 Vagrant Setup Start Vagrant Machines Provision Vagrant Machines Configure Ansible-Vagrant SSH Info Cloud Node Setup Run Ansible Set Up Vault Secret Run the Base Playbook Change Variables Vagrant Setup \u00b6 Vagrant is a command-line wrapper around VirtualBox and allows setting up one or more virtual machines to test out Ansible playbooks locally. To run Vagrant boxes, you need a Vagrantfile. One is provided in this repo, but if you don't have one you can run vagrant init ubuntu/xenial64 to create a new one. Start Vagrant Machines \u00b6 The following commands require a Vagrantfile . Use the provided one or modify it for your needs. Start a vagrant virtual machine with: vagrant up Provision Vagrant Machines \u00b6 Run the initial setup play with Ansible using the provision.yml provision playbook: ANSIBLE_CONFIG=\"vagrant.cfg\" vagrant provision Configure Ansible-Vagrant SSH Info \u00b6 Vagrant provides info about how to connect to the Vagrant machine(s) created using the ssh-config verb: vagrant ssh-config Copy this information into the vagranthosts inventory file so that Ansible knows how to connect to the Vagrant boxes. Cloud Node Setup \u00b6 Different cloud providers set up their compute nodes differently, but the following is required to do on a cloud node before you can run Ansible on it. Ensure your operating system has a version of python3 available from the command line Ensure the public SSH key of the machine from which you are running Ansible matches the public SSH key in the authorized keys file that will be installed via Ansible The authorized keys file is located in roles/ssh/files/authorized_keys Ensure the hosts file for this cloud node contains a username that actually exists on the remote system Run Ansible \u00b6 Set Up Vault Secret \u00b6 Warning The vault secret should match the original secret used to encrypt the vault. If you don't have it, delete vault and start over. Before running Ansible with the Ansible-Vagrant config file, it will expect the vault secret to be in a file called .vault_secret in the current directory. Create this file before proceeding. Example .vault_secret file: this_is_my_super_strong_password! To use this file to access variables in the vault, pass the vault password file using the flag: ansible-playbook \\ --vault-password-file=.vault_secret \\ <other-flags> Run the Base Playbook \u00b6 To run a playbook, use the ANSIBLE_CONFIG environment variable to specify the Ansible-Vagrant config file, and use the ansible-playbook command: ANSIBLE_CONFIG=\"vagrant.cfg\" ansible-playbook \\ --vault-password-file=.vault_secret \\ base.yml The config file specifies the inventory file, SSH key, vault password, and log file to use, among other details. Change Variables \u00b6 You can modify variables in the group_vars/main.yml file by adding additional variable definitions in YAML format: $ cat group_vars/main.yml ... my_var_1: \"red\" my_var_2: \"blue\" Alternatively, you can pass custom variable values on the command line. (This is how we specify the machine name when running playbooks.) Here, we set a few example variables: $ ANSIBLE_CONFIG=\"my_config_file.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ -i hosts \\ --extra-vars \"my_var_1=red,my_var_2=blue\" \\ playbook.yml See Ansible Playbooks for next steps.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"This quickstart walks through the process of using Vagrant and running the charlesreid1 playbooks against a Vagrant machine.","title":"Quickstart"},{"location":"quickstart/#table-of-contents","text":"Vagrant Setup Start Vagrant Machines Provision Vagrant Machines Configure Ansible-Vagrant SSH Info Cloud Node Setup Run Ansible Set Up Vault Secret Run the Base Playbook Change Variables","title":"Table of Contents"},{"location":"quickstart/#vagrant-setup","text":"Vagrant is a command-line wrapper around VirtualBox and allows setting up one or more virtual machines to test out Ansible playbooks locally. To run Vagrant boxes, you need a Vagrantfile. One is provided in this repo, but if you don't have one you can run vagrant init ubuntu/xenial64 to create a new one.","title":"Vagrant Setup"},{"location":"quickstart/#start-vagrant-machines","text":"The following commands require a Vagrantfile . Use the provided one or modify it for your needs. Start a vagrant virtual machine with: vagrant up","title":"Start Vagrant Machines"},{"location":"quickstart/#provision-vagrant-machines","text":"Run the initial setup play with Ansible using the provision.yml provision playbook: ANSIBLE_CONFIG=\"vagrant.cfg\" vagrant provision","title":"Provision Vagrant Machines"},{"location":"quickstart/#configure-ansible-vagrant-ssh-info","text":"Vagrant provides info about how to connect to the Vagrant machine(s) created using the ssh-config verb: vagrant ssh-config Copy this information into the vagranthosts inventory file so that Ansible knows how to connect to the Vagrant boxes.","title":"Configure Ansible-Vagrant SSH Info"},{"location":"quickstart/#cloud-node-setup","text":"Different cloud providers set up their compute nodes differently, but the following is required to do on a cloud node before you can run Ansible on it. Ensure your operating system has a version of python3 available from the command line Ensure the public SSH key of the machine from which you are running Ansible matches the public SSH key in the authorized keys file that will be installed via Ansible The authorized keys file is located in roles/ssh/files/authorized_keys Ensure the hosts file for this cloud node contains a username that actually exists on the remote system","title":"Cloud Node Setup"},{"location":"quickstart/#run-ansible","text":"","title":"Run Ansible"},{"location":"quickstart/#set-up-vault-secret","text":"Warning The vault secret should match the original secret used to encrypt the vault. If you don't have it, delete vault and start over. Before running Ansible with the Ansible-Vagrant config file, it will expect the vault secret to be in a file called .vault_secret in the current directory. Create this file before proceeding. Example .vault_secret file: this_is_my_super_strong_password! To use this file to access variables in the vault, pass the vault password file using the flag: ansible-playbook \\ --vault-password-file=.vault_secret \\ <other-flags>","title":"Set Up Vault Secret"},{"location":"quickstart/#run-the-base-playbook","text":"To run a playbook, use the ANSIBLE_CONFIG environment variable to specify the Ansible-Vagrant config file, and use the ansible-playbook command: ANSIBLE_CONFIG=\"vagrant.cfg\" ansible-playbook \\ --vault-password-file=.vault_secret \\ base.yml The config file specifies the inventory file, SSH key, vault password, and log file to use, among other details.","title":"Run the Base Playbook"},{"location":"quickstart/#change-variables","text":"You can modify variables in the group_vars/main.yml file by adding additional variable definitions in YAML format: $ cat group_vars/main.yml ... my_var_1: \"red\" my_var_2: \"blue\" Alternatively, you can pass custom variable values on the command line. (This is how we specify the machine name when running playbooks.) Here, we set a few example variables: $ ANSIBLE_CONFIG=\"my_config_file.cfg\" \\ ansible-playbook \\ --vault-password-file=.vault_secret \\ -i hosts \\ --extra-vars \"my_var_1=red,my_var_2=blue\" \\ playbook.yml See Ansible Playbooks for next steps.","title":"Change Variables"}]}